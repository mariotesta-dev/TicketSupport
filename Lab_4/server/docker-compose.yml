version: '3.1'

volumes:
  postgres_data:
    driver: local
  nginx.conf:


services:
  nginx:
    image: nginx:latest
    ports:
      - '80:80'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - my-network
  API:
    image: 'server-0.1.jar'
    container_name: API
    hostname: API
    ports:
      - '8081:8081'
    depends_on:
      PostgreSQL:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://PostgreSQL:5432/postgres
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_HIBERNATE_DDL_AUTO=create
      - SPRING_JPA_SHOW_SQL=true
      - SPRING_JPA_DEFER_DATASOURCE_INITIALIZATION=true
      - SPRING_SQL_INIT_MODE=always
    networks:
      - my-network

  PostgreSQL:
    image: postgres
    container_name: PostgreSQL
    hostname: PostgreSQL
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    healthcheck:
        test: ["CMD", "pg_isready -U postgres"]
        interval: 10s
        timeout: 5s
        retries: 5
    networks:
      - my-network

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    hostname: keycloak
    ports:
      - '8080:8080'
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - PROXY_ADDRESS_FORWARDING=true
      - KEYCLOAK_FRONTEND_URL=http://keycloak:8080/auth
    command:
      - start-dev
      - --http-relative-path=/auth
    networks:
      - my-network

networks:
  my-network:
    driver: bridge